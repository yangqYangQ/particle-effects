{"version":3,"sources":["App.module.scss","BasicButtons/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BasicButtons","props","pop","e","clientX","clientY","type","target","dataset","setState","amount","showParticle","animationEnd","primaryParticle","index","state","width","Math","floor","random","height","destinationX","destinationY","duration","frame","keyframes","Particle","styled","div","key","onAnimationEnd","squareParticle","rotation","emojiParticle","marioParticle","shadowParticle","color","lineParticle","this","className","map","data-type","onClick","Array","from","length","_","Component","App","styles","page","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.67fd4484.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"App_page__3T4Wq\"};","import React, {Component} from 'react';\r\nimport styled, {keyframes} from 'styled-components';\r\n\r\nclass BasicButtons extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            amount: 0,\r\n            showParticle: false,\r\n            type: '',\r\n            clientX: 0,\r\n            clientY: 0\r\n        };\r\n    }\r\n\r\n    pop = (e) => {\r\n        const {clientX, clientY} = e;\r\n        const type = e.target.dataset.type;\r\n        let amount = 30;\r\n\r\n        this.setState({\r\n            type,\r\n            amount,\r\n            clientY,\r\n            clientX,\r\n            showParticle: true\r\n        });\r\n    };\r\n\r\n    animationEnd = () => {\r\n        this.setState({\r\n            type: '',\r\n            amount: 0,\r\n            clientX: 0,\r\n            clientY: 0,\r\n            showParticle: false\r\n        });\r\n    };\r\n\r\n    primaryParticle = (index) => {\r\n        const {clientX, clientY} = this.state;\r\n        let width = Math.floor(Math.random() * 20 + 5);\r\n        let height = width;\r\n        let destinationX = (Math.random() - 0.5) * 150;\r\n        let destinationY = (Math.random() - 0.5) * 150;\r\n        let duration = 500 + Math.random() * 1000;\r\n\r\n        const frame = keyframes`\r\n              from {\r\n                transform: translate(${clientX - (width / 2)}px, ${clientY - (width / 2)}px);\r\n                opacity: 1\r\n              }\r\n            \r\n              to {\r\n                transform: translate(${clientX - destinationX}px, ${clientY - destinationY}px);\r\n                opacity: 0\r\n              }\r\n        `;\r\n\r\n        const Particle = styled.div`\r\n            width: ${width}px;\r\n            height: ${height}px;\r\n            background: hsl(${Math.random() * 90 + 180}, 70%, 60%);\r\n            border-radius: 50%;\r\n            animation: ${frame} ${duration}ms cubic-bezier(0, .9, .57, 1) 0s;\r\n        `;\r\n\r\n        return <Particle key={index} onAnimationEnd={this.animationEnd}/>;\r\n    };\r\n\r\n    squareParticle = (index) => {\r\n        const {clientX, clientY} = this.state;\r\n        let width = Math.floor(Math.random() * 30 + 5);\r\n        let height = width;\r\n        let destinationX = (Math.random() - 0.5) * 300;\r\n        let destinationY = (Math.random() - 0.5) * 300;\r\n        let duration = 1000 + Math.random() * 1000;\r\n        let rotation = Math.random() * 520;\r\n\r\n        const frame = keyframes`\r\n              from {\r\n                transform: translate(${clientX - (width / 2)}px, ${clientY - (width / 2)}px) rotate(0deg);\r\n                opacity: 1\r\n              }\r\n            \r\n              to {\r\n                transform: translate(${clientX - destinationX}px, ${clientY - destinationY}px) rotate(${rotation}deg);\r\n                opacity: 0\r\n              }\r\n        `;\r\n\r\n        const Particle = styled.div`\r\n            width: ${width}px;\r\n            height: ${height}px;\r\n            background: hsl(${Math.random() * 90 + 270}, 70%, 60%);\r\n            border: 1px solid white;\r\n            animation: ${frame} ${duration}ms cubic-bezier(0, .9, .57, 1) 0s;\r\n        `;\r\n\r\n        return <Particle key={index} onAnimationEnd={this.animationEnd}/>;\r\n    };\r\n\r\n    emojiParticle = (index) => {\r\n        const {clientX, clientY} = this.state;\r\n        let width = Math.floor(Math.random() * 30 + 5);\r\n        let height = width;\r\n        let destinationX = (Math.random() - 0.5) * 300;\r\n        let destinationY = (Math.random() - 0.5) * 300;\r\n        let duration = 1000 + Math.random() * 1000;\r\n        let rotation = Math.random() * 520;\r\n\r\n        const frame = keyframes`\r\n              from {\r\n                transform: translate(${clientX - (width / 2)}px, ${clientY - (width / 2)}px) rotate(0deg);\r\n                opacity: 1\r\n              }\r\n            \r\n              to {\r\n                transform: translate(${clientX - destinationX}px, ${clientY - destinationY}px) rotate(${rotation}deg);\r\n                opacity: 0\r\n              }\r\n        `;\r\n\r\n        const Particle = styled.div`\r\n            width: ${width}px;\r\n            height: ${height}px;\r\n            animation: ${frame} ${duration}ms cubic-bezier(0, .9, .57, 1) 0s;\r\n        `;\r\n\r\n        return (\r\n            <Particle key={index} onAnimationEnd={this.animationEnd}>\r\n                {['‚ù§', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'ü§é'][Math.floor(Math.random() * 7)]}\r\n            </Particle>\r\n        );\r\n    };\r\n\r\n    marioParticle = (index) => {\r\n        const {clientX, clientY} = this.state;\r\n        let width = Math.floor(Math.random() * 30 + 5);\r\n        let height = width;\r\n        let destinationX = (Math.random() - 0.5) * 300;\r\n        let destinationY = (Math.random() - 0.5) * 300;\r\n        let duration = 1000 + Math.random() * 1000;\r\n        let rotation = Math.random() * 520;\r\n\r\n        const frame = keyframes`\r\n              from {\r\n                transform: translate(${clientX - (width / 2)}px, ${clientY - (width / 2)}px) rotate(0deg);\r\n                opacity: 1\r\n              }\r\n            \r\n              to {\r\n                transform: translate(${clientX - destinationX}px, ${clientY - destinationY}px) rotate(${rotation}deg);\r\n                opacity: 0\r\n              }\r\n        `;\r\n\r\n        const Particle = styled.div`\r\n            width: ${width}px;\r\n            height: ${height}px;\r\n            animation: ${frame} ${duration}ms cubic-bezier(0, .9, .57, 1) 0s;\r\n            background-image: url('//i.loli.net/2020/04/04/IQbmYT5hMZtODqJ.png');\r\n        `;\r\n\r\n        return (\r\n            <Particle key={index} onAnimationEnd={this.animationEnd}/>\r\n        );\r\n    };\r\n\r\n    shadowParticle = (index) => {\r\n        const {clientX, clientY} = this.state;\r\n        let color = `hsl(${Math.random() * 90 + 90}, 70%, 60%)`;\r\n        let width = Math.floor(Math.random() * 5 + 4);\r\n        let height = width;\r\n        let destinationX = (Math.random() - 0.5) * 300;\r\n        let destinationY = (Math.random() - 0.5) * 300;\r\n        let duration = 1000 + Math.random() * 1000;\r\n        let rotation = Math.random() * 520;\r\n\r\n        const frame = keyframes`\r\n              from {\r\n                transform: translate(${clientX - (width / 2)}px, ${clientY - (width / 2)}px) rotate(0deg);\r\n                opacity: 1\r\n              }\r\n            \r\n              to {\r\n                transform: translate(${clientX - destinationX}px, ${clientY - destinationY}px) rotate(${rotation}deg);\r\n                opacity: 0\r\n              }\r\n        `;\r\n\r\n        const Particle = styled.div`\r\n            width: ${width}px;\r\n            height: ${height}px;\r\n            background: ${color};\r\n            border-radius: 50%;\r\n            animation: ${frame} ${duration}ms cubic-bezier(0, .9, .57, 1) 0s;\r\n            box-shadow: 0 0 ${Math.floor(Math.random() * 10 + 10)}px ${color}\r\n        `;\r\n\r\n        return <Particle key={index} onAnimationEnd={this.animationEnd}/>;\r\n    };\r\n\r\n    lineParticle = (index) => {\r\n        const {clientX, clientY} = this.state;\r\n        let width = Math.floor(Math.random() * 25 + 4);\r\n        let destinationX = (Math.random() - 0.5) * 300;\r\n        let destinationY = (Math.random() - 0.5) * 300;\r\n        let duration = 1000 + Math.random() * 1000;\r\n        let rotation = Math.random() * 520 + 1000;\r\n\r\n        const frame = keyframes`\r\n              from {\r\n                transform: translate(${clientX - (width / 2)}px, ${clientY - (width / 2)}px) rotate(0deg);\r\n                opacity: 1\r\n              }\r\n            \r\n              to {\r\n                transform: translate(${clientX - destinationX}px, ${clientY - destinationY}px) rotate(${rotation}deg);\r\n                opacity: 0\r\n              }\r\n        `;\r\n\r\n        const Particle = styled.div`\r\n            width: ${width}px;\r\n            height: 1px;\r\n            background: black;\r\n            animation: ${frame} ${duration}ms cubic-bezier(0, .9, .57, 1) 0s;\r\n        `;\r\n\r\n        return <Particle key={index} onAnimationEnd={this.animationEnd}/>;\r\n    };\r\n\r\n    render() {\r\n        const {amount, showParticle} = this.state;\r\n\r\n        return (\r\n            <div className='buttons-wrapper'>\r\n                <div className=\"buttons\">\r\n                    {\r\n                        ['primary', 'square', 'emoji', 'mario', 'shadow', 'line'].map((type, index) =>\r\n                            <div className=\"wrapper\" key={index}>\r\n                                <button data-type={type} onClick={this.pop}>{type} particles</button>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                {\r\n                    showParticle ?\r\n                        <div className=\"particles\">\r\n                            {\r\n                                Array.from({length: amount}).map((_, index) =>\r\n                                    this[`${this.state.type}Particle`](index)\r\n                                )\r\n                            }\r\n                        </div> : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BasicButtons;","import React, {Component} from 'react';\nimport BasicButtons from './BasicButtons';\nimport styles from './App.module.scss';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className={styles.page}>\n                <h1>React Particle Effects</h1>\n                <BasicButtons/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}